#!/usr/bin/python
# coding=utf-8

import re, sys, os, select
from generic_transform import * 

sys.path.append('../common/openCalais/')
sys.path.append('../common/alchmyAPI/')

from calais import Calais
import urllib, urllib2
import mimetypes
import AlchemyAPI
import simplejson
from xml.dom.minidom import parseString
import xml.dom


def containsAll(str, set):
    """Check whether 'str' contains ALL of the chars in 'set'"""
    return 0 not in [c in str for c in set]



e_type,e_values,params = get_from_args()


site = e_values["value"]
    
resultList =[]

def callCalais(url,key):
  global resultList
  API_KEY_CALAIS = key
  calais = Calais(API_KEY_CALAIS, submitter="python-calais demo")
  result_calais = {}
  tipe = mimetypes.guess_type(url)[0]
  if tipe != None:
    if (containsAll(tipe,"html")):
       result_calais = calais.analyze_url(url)
  else:
    result_calais = calais.analyze_url(url)
  if result_calais != {}:
    if result_calais.get_entities() != None:
      for entity in result_calais.get_entities():
          try:
            val= {}
            if entity.has_key('_type'):
              if entity['_type'] == 'Person':
                  val["value"] = entity['name'].replace('\n',' ')
                  if val not in resultList :
                      write_result("person", val)
                      sys.stdout.flush()
                      resultList.append(val)

              elif entity['_type'] == 'URL':
                  val["value"] = entity['name'].replace('\n',' ')
                  if val not in resultList :
                      write_result("url", val)
                      sys.stdout.flush()
                      resultList.append(val)

              elif entity['_type'] == 'EmailAddress':
                  val["value"] = entity['name'].replace('\n',' ')
                  if val not in resultList :
                      write_result("email-address", val)
                      sys.stdout.flush()
                      resultList.append(val)

              elif entity['_type'] == 'Country':
                  val["value"] = "-,"+entity['name'].replace('\n',' ')
                  if entity.has_key('resolutions'):
                      if (entity['resolutions'].count(0) >0):
                          if entity['resolutions'][0].has_key('latitude'):
                              val["latitude"] = entity['resolutions'][0]['latitude'].replace('\n',' ')
                          if entity['resolutions'][0].has_key('longitudelatitude'):
                              val["longitude"] = entity['resolutions'][0]['longitude'].replace('\n',' ')
                  if val not in resultList :
                      write_result("location", val)
                      sys.stdout.flush()
                      resultList.append(val)


              elif entity['_type'] == 'City':
                  val["value"] = entity['name'].replace('\n',' ')
                  if entity.has_key('resolutions'):
                      if (entity['resolutions'].count(0) >0):
                          if entity['resolutions'][0].has_key('latitude'):
                              val["latitude"] = entity['resolutions'][0]['latitude'].replace('\n',' ')
                          if entity['resolutions'][0].has_key('longitude'):
                              val["longitude"] = entity['resolutions'][0]['longitude'].replace('\n',' ')
                          if entity['resolutions'][0].has_key('containedbycountry'):
                              val["value"] += ","+entity['resolutions'][0]['containedbycountry'].replace('\n',' ')
                          else:
                              val["value"] += ",-"
                      else:
                          val["value"] += ",-"
                  else:
                      val["value"] += ",-"
                  if val not in resultList :
                      write_result("location", val)
                      sys.stdout.flush()
                      resultList.append(val)
                      
              elif entity['_type'] == 'ProvinceOrState':
                  val["value"] = entity['name'].replace('\n',' ')
                  if entity.has_key('resolutions'):
                      if (entity['resolutions'].count(0) >0):
                          if entity['resolutions'][0].has_key('latitude'):
                              val["latitude"] = entity['resolutions'][0]['latitude'].replace('\n',' ')
                          if entity['resolutions'][0].has_key('longitudelatitude'):
                              val["longitude"] = entity['resolutions'][0]['longitude'].replace('\n',' ')
                          if entity['resolutions'][0].has_key('containedbycountry'):
                              val["value"] += ","+entity['resolutions'][0]['containedbycountry'].replace('\n',' ')
                          else:
                              val["value"] += ",-"
                      else:
                          val["value"] += ",-"
                  else:
                      val["value"] += ",-"
                  if val not in resultList :
                      write_result("location", val)
                      sys.stdout.flush()
                      resultList.append(val)
          except:
              write_error("Parsing Open callais result failed")
              sys.stdout.flush()
    
def callAlchemy(url,key):
  global resultList
  alchemyObj = AlchemyAPI.AlchemyAPI()
  alchemyObj.setAPIKey(key)

  result_alchemy = {}

  tipe = mimetypes.guess_type(url)[0]
  if tipe != None:
    if (containsAll(tipe,"html")):
       result_alchemy = alchemyObj.URLGetRankedNamedEntities(url)
  else:
    result_alchemy = alchemyObj.URLGetRankedNamedEntities(url);


  if result_alchemy != {}:
    xmlDoc = parseString(result_alchemy)
    
    for node in  xmlDoc.getElementsByTagName('entity'):
        try:
            val ={}
            xmlReturnType =""
            tmp =""
            for n in node.getElementsByTagName('type'):
                xmlReturnType = n.childNodes[0].nodeValue

            if (xmlReturnType == "Person"):
                for n in node.getElementsByTagName('text'):
                    tmp = n.childNodes[0].nodeValue
                if (tmp != ""):
                    val["value"] = tmp
                    if val not in resultList :
                        write_result("person", val)
                        sys.stdout.flush()
                        resultList.append(val)

            elif (xmlReturnType == "City" or xmlReturnType == "Region"):
                for n in node.getElementsByTagName('text'):
                    tmp = n.childNodes[0].nodeValue
                if (tmp != ""):
                    val["value"] = tmp+",-"
                    if val not in resultList :
                        write_result("location", val)
                        sys.stdout.flush()
                        resultList.append(val)

            elif (xmlReturnType == "Continent" or xmlReturnType == "StateOrCounty" or xmlReturnType == "Country"):
                for n in node.getElementsByTagName('text'):
                    tmp = n.childNodes[0].nodeValue
                if (tmp != ""):
                    val["value"] = "-,"+tmp
                    if val not in resultList :
                        write_result("location", val)
                        sys.stdout.flush()
                        resultList.append(val)


            elif (xmlReturnType == "OperatingSystem"):
                for n in node.getElementsByTagName('text'):
                    tmp = n.childNodes[0].nodeValue
                if (tmp != ""):
                    val["value"] = tmp
                    if val not in resultList :
                        write_result("operating-system", val)
                        sys.stdout.flush()
                        resultList.append(val)

        except:
            pass


try:
  if "keyCallais" in params:
    callCalais(site,params["keyCallais"])
  if "keyAlchemy" in params:
    callAlchemy(site,params["keyAlchemy"])
except:
  pass


